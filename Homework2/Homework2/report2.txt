--------------------------

学籍番号 : 15B15829
氏名 :李　墨然

--------------------------

回答1.2 : イベントハンドラを登録したオブジェクトは次のとおり
sceneに登録した




イベントハンドラを上のように登録した理由は以下のとおり
sceneに登録すれば、焦点はこのsceneにある場合ならばいつでもキーを打てば作動できるようになる。windows自分の計算器みたいな感じ。





回答4 : package para.graphic.parserの動作の説明
まずMainParserがScannerの中のshape文字を受け取って、この文字を自分のHashMapで探して、最初はshapeなので、ShapeManagerParserを新しく作って、このParserを管理するShapeManagerにParserを入れる。
そのあと、ShapeManegerがまずidを解析して、そのあと形を解析する。
形状が分かったら、その形状のParserにScannerを伝える。
このあと、shapemanagerにParserが解析した形状の情報とid（idが同じなものがあれば代わる）を伝える。
この一連の動作が終わったら、MainParserが二個目の情報を解析して、Target情報なので、TaregetParserにScannerの情報を伝えて、そのあと、TargetParserは動作の情報を解析して、drawならば、まず情報を対応のTargetに伝えて、TargetがShapeManagerのdrawを利用する。ShapeManegerが自分の中にあるShapeの各自のdrawを逐次に利用する。ShapeもまたTargetのdrawを利用して自分の形を描く。




if-else文を並べた実装方法と比べた拡張性に関する利点はつぎのとおり
拡張したいときは単純に新しいクラスを作って、情報とかはクラス内で処理すればよい。if-elseという方法は全体的に改正しないといけない。







回答5 : para.graphic.parserパッケージの各クラスのアクセス修飾を次のようにした
AttributeParser       public ->default
CircleParser          public ->default
ImageParser           public ->default
MainParser            public ->public
MetaParser            public ->default
RectangleParser       public ->default
ShapeManagerParser    public ->default
ShapeParser           public ->default
TargetParser          public ->default

上記のようにアクセス修飾をした理由は次のとおり
MainParserはクラス外部でも呼ばれるが、他のはパッケージ内しか呼ばれない。protectはメソッドとオブジェクトしか修飾できない。
privateは内部クラスしか修飾できないので、MainParser以外のはdefaultで修飾する






回答6 : para.graphic.parser.ImageParserの仕組みの説明
ImageParserはまずbyte形式のInputStreamとbuffer用のbyte arrayを作る。構文解析するときはまずxとy座標の情報を受け取る。そのあとScannerの中の画像情報（事前にBase64をencodeするもの）を正規表現によって[a-zA-Z0-9\+/=&]などの情報を全部bufferにcopyする。copyするときは一つだけの"&"があるときはcopyをやめる。そのあとinputの情報をresetする。そのあと、Base64のDecoderによってdecodeする情報をBufferedImageにコピーする。
そのあと、Attributeの情報があればAttributeParserにScannerの情報を伝えて構文解析する。終わったら、imageの情報を返す。









工夫した点や感想：
全局の把握は難しいです。
