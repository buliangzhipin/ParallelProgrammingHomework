--------------------------

学籍番号 : 1515829
氏名 :李墨然

--------------------------

回答1 :
1.1) 途中結果が表示されなかった理由の説明

operation()を実行するときはJavaFX Application Threadによって実行する。描画するスレッドもこのスレッドなので、operataion()を実行するときwriteStateメソッドをつかっても、JavaFX Application Threadが忙しいので、outputを変更できない


1.2) 改良方針の説明

=キーを押したとき、新しいスレッドを生成して、新しいスレッドMyThreadがoperation()して、writeStateメソッドを使って、JavaFX Application Threadが数字を変更する。
また、次のものができるように、実際にinputを鍵としてロックする。MyThreadが終わるまでwaitする。MyThreadが終わったら、これをNotifyする。そうすることによって、次のものを押したら順番に実行することができる。

1.3) 発生したエラー文は次のとおり

Exception in thread "Thread-7" java.lang.IllegalStateException: Not on FX application thread; currentThread = Thread-7

runLater()の処理内容について

JavaFX Application Threadではないものが今のPlatformを変更できるために、タスクをまず応募して、後でPlatformが実際にJavaFXを変更する


runLater()がjavafxに用意されている理由

JavaFXが自由に変更されたら競り合いが生じる可能性があるので、Platform.runLaterによって、JavaFX自身が変更を管理すると、競り合いが減られる。

回答2 :
2.2)2つのスレッドのそれぞれの処理内容について
1つ目のスレッド

変更されたshapemanegerを100msおきに更新する。

2つ目のスレッド

main関数が受信を待って応答する。

2.3)同期についての考えられている配慮

配慮は十分である

十分であると考える場合のその理由

smを描くときは、いま描くsmをロックする。ShapeManegerクラスの方法は全部synchronized方法なので、実際に描くときはsm方法が使えないので、同期は十分である



2.4)並行サーバを実現するにあたり工夫した点
各クライアントからのデータの表示位置の割り振りについてどのように実現したかなど

新しいFlagクラスを作って、連接が始めるときはFlagのnotBusy関数を使って、忙しくない部分を検索する。連接が中断されるときはFlagクラスの設定方法を使って、切断された部分を釈放する。


回答3 :
3.1)改造方針、スレッドの役割分担についての説明

三つのスレッドがある。
一つ目は最初のServerのCanvaに描くスレッド。
二つ目はクライアントからの情報をScannerして、実際に対応のShapeManegerに情報を伝える
三つ目は今のJavaFX Target上のものをBufferedImageに変換して、クライアントに100msおきに返すスレッドである

回答4 :
4.1)
PrintStreamでの例外発生を確認する方法

PrintStream.checkError()

例外処理がPrintStreamと他のStreamとで異なる理由

PrintStreamのソースコードの一部は下述の通り
public void write(int b) {
         try {
            synchronized (this) {
                 ensureOpen();
                 out.write(b);
                 if ((b == '\n') && autoFlush)
                    out.flush();
             }
         }
         catch (InterruptedIOException x) {
             Thread.currentThread().interrupt();
         }
         catch (IOException x) {
             trouble = true;
         }
     }
見た通りPrintStreamは例外を全部受け取って、自分で処理しようとするので、例外処理は自分でしないといけない。他のものはthrowだけなので、Catchして処理する必要がある。


4.2)
受信機能の追加について、工夫した点があれば記述

通話アプリをイメージをして作っているので、クライアントが切断すると、イメージも消すようにする。


今回の課題で特に学べたと感じたこと
