--------------------------

学籍番号 : 1515829	
氏名 :李　墨然

--------------------------

回答1 :
1.1) 空欄に入る数は以下のとおり

A：256*256*256=16777216

B:4*4*4=64

C:Aと同じく16777216

1.2)
並列化で問題となるStreamの処理の番号

一番目


1.3)単純に並列化したのでは結果が異なる原因

RGBのaddメソッドを利用するとき、衝突が起きて、加算されない可能性がある





1.4)並列化に対応するために行った変更点

addメソッドにsynchronizedをつけた。




回答2 :
2.1)
出力される時間の意味

gameの中にtimeが1から0になる100回繰り返して処理する時間

達成された高速化の数値的説明

47958msec
30998msec


計測時間の信頼性を向上させるために行った工夫、計測で注意した点





2.2)
衝突判定部分の高速化についてのjvisualvmを使用した調査方法の説明

jvisualvのcpu時間を見て、その中に各メソッドを使った時間が書いてある



調査により判明した衝突判定部分の高速化前後の処理速度の比率

約2：1





2.3)
発見された改善対象のコード部分





改良方針





2.4)2.3で行った改良部分の改良前後の処理時間について

処理時間の定義




改良前と比べ改良後の処理時間は　　　　％となった



回答3 :
3.1)ゲーム性を高めるための実装
得点ルールの定義

すべてのレンガが消されたらゲームが終わる。得点は残るレンガの数を示す。


得点計算のコード部分について

単純に当たったらマイナス1する。


得点表示のためのコード部分について

新しいdigitalというShapeManegerを用意して、この中に数字を入れる


ゲームの終了条件の定義

すべてのレンガがなくなったら終わる


ゲームの終了判定のコード部分について

最初のレンガの数が0になったらgameOngoingFlagというboolean値をfalseにして、whileから抜ける。



スタートボタンを押した際の新たな初期化処理について

gameOngoingFlagはfalseならば、ゲームがおわって、新たにThreadを作ることが可能になる




ゲームの難易度の方針

難易度が大きくなると、レンガの数が増える。体積も減る。



数値選択とゲーム難易度についての実装部分について

面積を考慮してレンガを最初に作る




3.2)さらなるゲーム性を高めるための実装
実装方針

ゲーム終了時、終了画面を表示する
チートボタンを入れた（デバック用）
pauseボタンを入れた

実装箇所

終了表示は衝突検測の後ろに実装した
チートはOverrideのstartメソッドに実装した。チート内容はthread内に含めた。
pauseはOverrideのstartメソッドに実装した





今回の課題で特に学べたと感じたこと

